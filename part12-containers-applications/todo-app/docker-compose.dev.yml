services:
  app:
    image: hello-front-dev
    build:
      context: . # The context will pick this directory as the "build context"
      dockerfile: /todo-frontend/dev.Dockerfile # This will simply tell which dockerfile to read
    volumes:
      - ./todo-frontend/:/usr/src/app # The path can be relative, so ./ is enough to say "the same location as the docker-compose.yml"
    # ports:
    #   - 3000:3000
    environment:
      - REACT_APP_BACKEND_URL=http://localhost/api
    container_name: hello-front-dev # This will name the container hello-front-dev

  nginx:
    image: nginx
    volumes:
      - ./nginx.dev.conf:/etc/nginx/nginx.conf:ro
    ports:
      - 80:80
    container_name: reverse-proxy
    depends_on:
      - app #wait for the frontend container to be started
      - server

  server: # The name of the service, can be anything
    image: express-server # Declares which image to use
    build: # Declares where to build if image is not found
      context: .
      dockerfile: /todo-backend/dev.Dockerfile
    # ports:                  # Declares the ports to publish
    #   - 3001:3001           # Note that I'am using dotenv
    environment:
      - REDIS_URL=redis://redis:6379
      - MONGO_URL=mongodb://the_username:the_password@mongo:27017/the_database
      - PORT = 3001
    volumes:
      - ./todo-backend/:/usr/src/app
    container_name: todo-backend-dev

  mongo:
    image: mongo
    # ports:
    #   - 3456:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: the_database
    volumes:
      - ./todo-backend/mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
      - mongo_data:/data/db

  redis:
    image: redis
    # ports:
    #   - 6378:6379
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - ./todo-backend/redis_data:/data

volumes:
  mongo_data:
